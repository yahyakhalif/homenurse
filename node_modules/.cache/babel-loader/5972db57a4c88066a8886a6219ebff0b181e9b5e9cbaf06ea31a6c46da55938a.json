{"ast":null,"code":"import * as e from \"react\";\nfunction t() {\n  return t = Object.assign ? Object.assign.bind() : function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n    }\n    return e;\n  }, t.apply(this, arguments);\n}\nconst n = [\"children\", \"options\"],\n  r = {\n    blockQuote: \"0\",\n    breakLine: \"1\",\n    breakThematic: \"2\",\n    codeBlock: \"3\",\n    codeFenced: \"4\",\n    codeInline: \"5\",\n    footnote: \"6\",\n    footnoteReference: \"7\",\n    gfmTask: \"8\",\n    heading: \"9\",\n    headingSetext: \"10\",\n    htmlBlock: \"11\",\n    htmlComment: \"12\",\n    htmlSelfClosing: \"13\",\n    image: \"14\",\n    link: \"15\",\n    linkAngleBraceStyleDetector: \"16\",\n    linkBareUrlDetector: \"17\",\n    linkMailtoDetector: \"18\",\n    newlineCoalescer: \"19\",\n    orderedList: \"20\",\n    paragraph: \"21\",\n    ref: \"22\",\n    refImage: \"23\",\n    refLink: \"24\",\n    table: \"25\",\n    tableSeparator: \"26\",\n    text: \"27\",\n    textBolded: \"28\",\n    textEmphasized: \"29\",\n    textEscaped: \"30\",\n    textMarked: \"31\",\n    textStrikethroughed: \"32\",\n    unorderedList: \"33\"\n  };\nvar i;\n!function (e) {\n  e[e.MAX = 0] = \"MAX\", e[e.HIGH = 1] = \"HIGH\", e[e.MED = 2] = \"MED\", e[e.LOW = 3] = \"LOW\", e[e.MIN = 4] = \"MIN\";\n}(i || (i = {}));\nconst l = [\"allowFullScreen\", \"allowTransparency\", \"autoComplete\", \"autoFocus\", \"autoPlay\", \"cellPadding\", \"cellSpacing\", \"charSet\", \"classId\", \"colSpan\", \"contentEditable\", \"contextMenu\", \"crossOrigin\", \"encType\", \"formAction\", \"formEncType\", \"formMethod\", \"formNoValidate\", \"formTarget\", \"frameBorder\", \"hrefLang\", \"inputMode\", \"keyParams\", \"keyType\", \"marginHeight\", \"marginWidth\", \"maxLength\", \"mediaGroup\", \"minLength\", \"noValidate\", \"radioGroup\", \"readOnly\", \"rowSpan\", \"spellCheck\", \"srcDoc\", \"srcLang\", \"srcSet\", \"tabIndex\", \"useMap\"].reduce((e, t) => (e[t.toLowerCase()] = t, e), {\n    class: \"className\",\n    for: \"htmlFor\"\n  }),\n  a = {\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    nbsp: \" \",\n    quot: \"“\"\n  },\n  o = [\"style\", \"script\"],\n  c = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n  s = /mailto:/i,\n  d = /\\n{2,}$/,\n  p = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/,\n  u = /^ *> ?/gm,\n  f = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/,\n  h = /^ {2,}\\n/,\n  m = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/,\n  g = /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/,\n  y = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n  k = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  x = /^(?:\\n *)*\\n/,\n  b = /\\r\\n?/g,\n  v = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/,\n  S = /^\\[\\^([^\\]]+)]/,\n  C = /\\f/g,\n  $ = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/,\n  E = /^\\s*?\\[(x|\\s)\\]/,\n  w = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  z = /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  L = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n  A = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i,\n  T = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi,\n  O = /^<!--[\\s\\S]*?(?:-->)/,\n  B = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n  M = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n  R = /^\\{.*\\}$/,\n  I = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  U = /^<([^ >]+@[^ >]+)>/,\n  D = /^<([^ >]+:\\/[^ >]+)>/,\n  N = /-([a-z])?/gi,\n  j = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/,\n  H = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/,\n  P = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  F = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  _ = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n  G = /\\t/g,\n  W = /(^ *\\||\\| *$)/g,\n  Z = /^ *:-+: *$/,\n  q = /^ *:-+ *$/,\n  Q = /^ *-+: *$/,\n  V = \"((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~~.*?~~|==.*?==|.|\\\\n)*?)\",\n  X = new RegExp(`^([*_])\\\\1${V}\\\\1\\\\1(?!\\\\1)`),\n  J = new RegExp(`^([*_])${V}\\\\1(?!\\\\1|\\\\w)`),\n  K = new RegExp(`^==${V}==`),\n  Y = new RegExp(`^~~${V}~~`),\n  ee = /^\\\\([^0-9A-Za-z\\s])/,\n  te = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i,\n  ne = /^\\n+/,\n  re = /^([ \\t]*)/,\n  ie = /\\\\([^\\\\])/g,\n  le = / *\\n+$/,\n  ae = /(?:^|\\n)( *)$/,\n  oe = \"(?:\\\\d+\\\\.)\",\n  ce = \"(?:[*+-])\";\nfunction se(e) {\n  return \"( *)(\" + (1 === e ? oe : ce) + \") +\";\n}\nconst de = se(1),\n  pe = se(2);\nfunction ue(e) {\n  return new RegExp(\"^\" + (1 === e ? de : pe));\n}\nconst fe = ue(1),\n  he = ue(2);\nfunction me(e) {\n  return new RegExp(\"^\" + (1 === e ? de : pe) + \"[^\\\\n]*(?:\\\\n(?!\\\\1\" + (1 === e ? oe : ce) + \" )[^\\\\n]*)*(\\\\n|$)\", \"gm\");\n}\nconst ge = me(1),\n  ye = me(2);\nfunction ke(e) {\n  const t = 1 === e ? oe : ce;\n  return new RegExp(\"^( *)(\" + t + \") [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1\" + t + \" (?!\" + t + \" ))\\\\n*|\\\\s*\\\\n*$)\");\n}\nconst xe = ke(1),\n  be = ke(2);\nfunction ve(e, t) {\n  const n = 1 === t,\n    i = n ? xe : be,\n    l = n ? ge : ye,\n    a = n ? fe : he;\n  return {\n    match(e, t) {\n      const n = ae.exec(t.prevCapture);\n      return n && (t.list || !t.inline && !t.simple) ? i.exec(e = n[1] + e) : null;\n    },\n    order: 1,\n    parse(e, t, r) {\n      const i = n ? +e[2] : void 0,\n        o = e[0].replace(d, \"\\n\").match(l);\n      let c = !1;\n      return {\n        items: o.map(function (e, n) {\n          const i = a.exec(e)[0].length,\n            l = new RegExp(\"^ {1,\" + i + \"}\", \"gm\"),\n            s = e.replace(l, \"\").replace(a, \"\"),\n            d = n === o.length - 1,\n            p = -1 !== s.indexOf(\"\\n\\n\") || d && c;\n          c = p;\n          const u = r.inline,\n            f = r.list;\n          let h;\n          r.list = !0, p ? (r.inline = !1, h = s.replace(le, \"\\n\\n\")) : (r.inline = !0, h = s.replace(le, \"\"));\n          const m = t(h, r);\n          return r.inline = u, r.list = f, m;\n        }),\n        ordered: n,\n        start: i\n      };\n    },\n    render: (t, n, i) => e(t.ordered ? \"ol\" : \"ul\", {\n      key: i.key,\n      start: t.type === r.orderedList ? t.start : void 0\n    }, t.items.map(function (t, r) {\n      return e(\"li\", {\n        key: r\n      }, n(t, i));\n    }))\n  };\n}\nconst Se = new RegExp(\"^\\\\[((?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*)\\\\]\\\\(\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n  Ce = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/,\n  $e = [p, g, y, w, L, z, O, j, ge, xe, ye, be],\n  Ee = [...$e, /^[^\\n]+(?:  \\n|\\n{2,})/, A, M];\nfunction we(e) {\n  return e.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, \"a\").replace(/[çÇ]/g, \"c\").replace(/[ðÐ]/g, \"d\").replace(/[ÈÉÊËéèêë]/g, \"e\").replace(/[ÏïÎîÍíÌì]/g, \"i\").replace(/[Ññ]/g, \"n\").replace(/[øØœŒÕõÔôÓóÒò]/g, \"o\").replace(/[ÜüÛûÚúÙù]/g, \"u\").replace(/[ŸÿÝý]/g, \"y\").replace(/[^a-z0-9- ]/gi, \"\").replace(/ /gi, \"-\").toLowerCase();\n}\nfunction ze(e) {\n  return Q.test(e) ? \"right\" : Z.test(e) ? \"center\" : q.test(e) ? \"left\" : null;\n}\nfunction Le(e, t, n, i) {\n  const l = n.inTable;\n  n.inTable = !0;\n  let a = e.trim().split(/( *(?:`[^`]*`|\\\\\\||\\|) *)/).reduce((e, l) => (\"|\" === l.trim() ? e.push(i ? {\n    type: r.tableSeparator\n  } : {\n    type: r.text,\n    text: l\n  }) : \"\" !== l && e.push.apply(e, t(l, n)), e), []);\n  n.inTable = l;\n  let o = [[]];\n  return a.forEach(function (e, t) {\n    e.type === r.tableSeparator ? 0 !== t && t !== a.length - 1 && o.push([]) : (e.type !== r.text || null != a[t + 1] && a[t + 1].type !== r.tableSeparator || (e.text = e.text.trimEnd()), o[o.length - 1].push(e));\n  }), o;\n}\nfunction Ae(e, t, n) {\n  n.inline = !0;\n  const i = e[2] ? e[2].replace(W, \"\").split(\"|\").map(ze) : [],\n    l = e[3] ? function (e, t, n) {\n      return e.trim().split(\"\\n\").map(function (e) {\n        return Le(e, t, n, !0);\n      });\n    }(e[3], t, n) : [],\n    a = Le(e[1], t, n, !!l.length);\n  return n.inline = !1, l.length ? {\n    align: i,\n    cells: l,\n    header: a,\n    type: r.table\n  } : {\n    children: a,\n    type: r.paragraph\n  };\n}\nfunction Te(e, t) {\n  return null == e.align[t] ? {} : {\n    textAlign: e.align[t]\n  };\n}\nfunction Oe(e) {\n  return function (t, n) {\n    return n.inline ? e.exec(t) : null;\n  };\n}\nfunction Be(e) {\n  return function (t, n) {\n    return n.inline || n.simple ? e.exec(t) : null;\n  };\n}\nfunction Me(e) {\n  return function (t, n) {\n    return n.inline || n.simple ? null : e.exec(t);\n  };\n}\nfunction Re(e) {\n  return function (t) {\n    return e.exec(t);\n  };\n}\nfunction Ie(e, t) {\n  if (t.inline || t.simple) return null;\n  let n = \"\";\n  e.split(\"\\n\").every(e => !$e.some(t => t.test(e)) && (n += e + \"\\n\", e.trim()));\n  const r = n.trimEnd();\n  return \"\" == r ? null : [n, r];\n}\nfunction Ue(e) {\n  try {\n    if (decodeURIComponent(e).replace(/[^A-Za-z0-9/:]/g, \"\").match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) return null;\n  } catch (e) {\n    return null;\n  }\n  return e;\n}\nfunction De(e) {\n  return e.replace(ie, \"$1\");\n}\nfunction Ne(e, t, n) {\n  const r = n.inline || !1,\n    i = n.simple || !1;\n  n.inline = !0, n.simple = !0;\n  const l = e(t, n);\n  return n.inline = r, n.simple = i, l;\n}\nfunction je(e, t, n) {\n  const r = n.inline || !1,\n    i = n.simple || !1;\n  n.inline = !1, n.simple = !0;\n  const l = e(t, n);\n  return n.inline = r, n.simple = i, l;\n}\nfunction He(e, t, n) {\n  const r = n.inline || !1;\n  n.inline = !1;\n  const i = e(t, n);\n  return n.inline = r, i;\n}\nconst Pe = (e, t, n) => ({\n  children: Ne(t, e[1], n)\n});\nfunction Fe() {\n  return {};\n}\nfunction _e() {\n  return null;\n}\nfunction Ge(...e) {\n  return e.filter(Boolean).join(\" \");\n}\nfunction We(e, t, n) {\n  let r = e;\n  const i = t.split(\".\");\n  for (; i.length && (r = r[i[0]], void 0 !== r);) i.shift();\n  return r || n;\n}\nfunction Ze(n = \"\", i = {}) {\n  function d(e, n, ...r) {\n    const l = We(i.overrides, `${e}.props`, {});\n    return i.createElement(function (e, t) {\n      const n = We(t, e);\n      return n ? \"function\" == typeof n || \"object\" == typeof n && \"render\" in n ? n : We(t, `${e}.component`, e) : e;\n    }(e, i.overrides), t({}, n, l, {\n      className: Ge(null == n ? void 0 : n.className, l.className) || void 0\n    }), ...r);\n  }\n  function W(e) {\n    e = e.replace($, \"\");\n    let t = !1;\n    i.forceInline ? t = !0 : i.forceBlock || (t = !1 === _.test(e));\n    const n = le(ie(t ? e : `${e.trimEnd().replace(ne, \"\")}\\n\\n`, {\n      inline: t\n    }));\n    for (; \"string\" == typeof n[n.length - 1] && !n[n.length - 1].trim();) n.pop();\n    if (null === i.wrapper) return n;\n    const r = i.wrapper || (t ? \"span\" : \"div\");\n    let l;\n    if (n.length > 1 || i.forceWrapper) l = n;else {\n      if (1 === n.length) return l = n[0], \"string\" == typeof l ? d(\"span\", {\n        key: \"outer\"\n      }, l) : l;\n      l = null;\n    }\n    return i.createElement(r, {\n      key: \"outer\"\n    }, l);\n  }\n  function Z(e, t) {\n    const n = t.match(c);\n    return n ? n.reduce(function (t, n) {\n      const r = n.indexOf(\"=\");\n      if (-1 !== r) {\n        const a = function (e) {\n            return -1 !== e.indexOf(\"-\") && null === e.match(B) && (e = e.replace(N, function (e, t) {\n              return t.toUpperCase();\n            })), e;\n          }(n.slice(0, r)).trim(),\n          o = function (e) {\n            const t = e[0];\n            return ('\"' === t || \"'\" === t) && e.length >= 2 && e[e.length - 1] === t ? e.slice(1, -1) : e;\n          }(n.slice(r + 1).trim()),\n          c = l[a] || a;\n        if (\"ref\" === c) return t;\n        const s = t[c] = function (e, t, n, r) {\n          return \"style\" === t ? n.split(/;\\s?/).reduce(function (e, t) {\n            const n = t.slice(0, t.indexOf(\":\"));\n            return e[n.trim().replace(/(-[a-z])/g, e => e[1].toUpperCase())] = t.slice(n.length + 1).trim(), e;\n          }, {}) : \"href\" === t || \"src\" === t ? r(n, e, t) : (n.match(R) && (n = n.slice(1, n.length - 1)), \"true\" === n || \"false\" !== n && n);\n        }(e, a, o, i.sanitizer);\n        \"string\" == typeof s && (A.test(s) || M.test(s)) && (t[c] = W(s.trim()));\n      } else \"style\" !== n && (t[l[n] || n] = !0);\n      return t;\n    }, {}) : null;\n  }\n  i.overrides = i.overrides || {}, i.sanitizer = i.sanitizer || Ue, i.slugify = i.slugify || we, i.namedCodesToUnicode = i.namedCodesToUnicode ? t({}, a, i.namedCodesToUnicode) : a, i.createElement = i.createElement || e.createElement;\n  const q = [],\n    Q = {},\n    V = {\n      [r.blockQuote]: {\n        match: Me(p),\n        order: 1,\n        parse(e, t, n) {\n          const [, r, i] = e[0].replace(u, \"\").match(f);\n          return {\n            alert: r,\n            children: t(i, n)\n          };\n        },\n        render(e, t, n) {\n          const l = {\n            key: n.key\n          };\n          return e.alert && (l.className = \"markdown-alert-\" + i.slugify(e.alert.toLowerCase(), we), e.children.unshift({\n            attrs: {},\n            children: [{\n              type: r.text,\n              text: e.alert\n            }],\n            noInnerParse: !0,\n            type: r.htmlBlock,\n            tag: \"header\"\n          })), d(\"blockquote\", l, t(e.children, n));\n        }\n      },\n      [r.breakLine]: {\n        match: Re(h),\n        order: 1,\n        parse: Fe,\n        render: (e, t, n) => d(\"br\", {\n          key: n.key\n        })\n      },\n      [r.breakThematic]: {\n        match: Me(m),\n        order: 1,\n        parse: Fe,\n        render: (e, t, n) => d(\"hr\", {\n          key: n.key\n        })\n      },\n      [r.codeBlock]: {\n        match: Me(y),\n        order: 0,\n        parse: e => ({\n          lang: void 0,\n          text: e[0].replace(/^ {4}/gm, \"\").replace(/\\n+$/, \"\")\n        }),\n        render: (e, n, r) => d(\"pre\", {\n          key: r.key\n        }, d(\"code\", t({}, e.attrs, {\n          className: e.lang ? `lang-${e.lang}` : \"\"\n        }), e.text))\n      },\n      [r.codeFenced]: {\n        match: Me(g),\n        order: 0,\n        parse: e => ({\n          attrs: Z(\"code\", e[3] || \"\"),\n          lang: e[2] || void 0,\n          text: e[4],\n          type: r.codeBlock\n        })\n      },\n      [r.codeInline]: {\n        match: Be(k),\n        order: 3,\n        parse: e => ({\n          text: e[2]\n        }),\n        render: (e, t, n) => d(\"code\", {\n          key: n.key\n        }, e.text)\n      },\n      [r.footnote]: {\n        match: Me(v),\n        order: 0,\n        parse: e => (q.push({\n          footnote: e[2],\n          identifier: e[1]\n        }), {}),\n        render: _e\n      },\n      [r.footnoteReference]: {\n        match: Oe(S),\n        order: 1,\n        parse: e => ({\n          target: `#${i.slugify(e[1], we)}`,\n          text: e[1]\n        }),\n        render: (e, t, n) => d(\"a\", {\n          key: n.key,\n          href: i.sanitizer(e.target, \"a\", \"href\")\n        }, d(\"sup\", {\n          key: n.key\n        }, e.text))\n      },\n      [r.gfmTask]: {\n        match: Oe(E),\n        order: 1,\n        parse: e => ({\n          completed: \"x\" === e[1].toLowerCase()\n        }),\n        render: (e, t, n) => d(\"input\", {\n          checked: e.completed,\n          key: n.key,\n          readOnly: !0,\n          type: \"checkbox\"\n        })\n      },\n      [r.heading]: {\n        match: Me(i.enforceAtxHeadings ? z : w),\n        order: 1,\n        parse: (e, t, n) => ({\n          children: Ne(t, e[2], n),\n          id: i.slugify(e[2], we),\n          level: e[1].length\n        }),\n        render: (e, t, n) => d(`h${e.level}`, {\n          id: e.id,\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.headingSetext]: {\n        match: Me(L),\n        order: 0,\n        parse: (e, t, n) => ({\n          children: Ne(t, e[1], n),\n          level: \"=\" === e[2] ? 1 : 2,\n          type: r.heading\n        })\n      },\n      [r.htmlBlock]: {\n        match: Re(A),\n        order: 1,\n        parse(e, t, n) {\n          const [, r] = e[3].match(re),\n            i = new RegExp(`^${r}`, \"gm\"),\n            l = e[3].replace(i, \"\"),\n            a = (c = l, Ee.some(e => e.test(c)) ? He : Ne);\n          var c;\n          const s = e[1].toLowerCase(),\n            d = -1 !== o.indexOf(s),\n            p = (d ? s : e[1]).trim(),\n            u = {\n              attrs: Z(p, e[2]),\n              noInnerParse: d,\n              tag: p\n            };\n          return n.inAnchor = n.inAnchor || \"a\" === s, d ? u.text = e[3] : u.children = a(t, l, n), n.inAnchor = !1, u;\n        },\n        render: (e, n, r) => d(e.tag, t({\n          key: r.key\n        }, e.attrs), e.text || (e.children ? n(e.children, r) : \"\"))\n      },\n      [r.htmlSelfClosing]: {\n        match: Re(M),\n        order: 1,\n        parse(e) {\n          const t = e[1].trim();\n          return {\n            attrs: Z(t, e[2] || \"\"),\n            tag: t\n          };\n        },\n        render: (e, n, r) => d(e.tag, t({}, e.attrs, {\n          key: r.key\n        }))\n      },\n      [r.htmlComment]: {\n        match: Re(O),\n        order: 1,\n        parse: () => ({}),\n        render: _e\n      },\n      [r.image]: {\n        match: Be(Ce),\n        order: 1,\n        parse: e => ({\n          alt: e[1],\n          target: De(e[2]),\n          title: e[3]\n        }),\n        render: (e, t, n) => d(\"img\", {\n          key: n.key,\n          alt: e.alt || void 0,\n          title: e.title || void 0,\n          src: i.sanitizer(e.target, \"img\", \"src\")\n        })\n      },\n      [r.link]: {\n        match: Oe(Se),\n        order: 3,\n        parse: (e, t, n) => ({\n          children: je(t, e[1], n),\n          target: De(e[2]),\n          title: e[3]\n        }),\n        render: (e, t, n) => d(\"a\", {\n          key: n.key,\n          href: i.sanitizer(e.target, \"a\", \"href\"),\n          title: e.title\n        }, t(e.children, n))\n      },\n      [r.linkAngleBraceStyleDetector]: {\n        match: Oe(D),\n        order: 0,\n        parse: e => ({\n          children: [{\n            text: e[1],\n            type: r.text\n          }],\n          target: e[1],\n          type: r.link\n        })\n      },\n      [r.linkBareUrlDetector]: {\n        match: (e, t) => t.inAnchor || i.disableAutoLink ? null : Oe(I)(e, t),\n        order: 0,\n        parse: e => ({\n          children: [{\n            text: e[1],\n            type: r.text\n          }],\n          target: e[1],\n          title: void 0,\n          type: r.link\n        })\n      },\n      [r.linkMailtoDetector]: {\n        match: Oe(U),\n        order: 0,\n        parse(e) {\n          let t = e[1],\n            n = e[1];\n          return s.test(n) || (n = \"mailto:\" + n), {\n            children: [{\n              text: t.replace(\"mailto:\", \"\"),\n              type: r.text\n            }],\n            target: n,\n            type: r.link\n          };\n        }\n      },\n      [r.orderedList]: ve(d, 1),\n      [r.unorderedList]: ve(d, 2),\n      [r.newlineCoalescer]: {\n        match: Me(x),\n        order: 3,\n        parse: Fe,\n        render: () => \"\\n\"\n      },\n      [r.paragraph]: {\n        match: Ie,\n        order: 3,\n        parse: Pe,\n        render: (e, t, n) => d(\"p\", {\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.ref]: {\n        match: Oe(H),\n        order: 0,\n        parse: e => (Q[e[1]] = {\n          target: e[2],\n          title: e[4]\n        }, {}),\n        render: _e\n      },\n      [r.refImage]: {\n        match: Be(P),\n        order: 0,\n        parse: e => ({\n          alt: e[1] || void 0,\n          ref: e[2]\n        }),\n        render: (e, t, n) => Q[e.ref] ? d(\"img\", {\n          key: n.key,\n          alt: e.alt,\n          src: i.sanitizer(Q[e.ref].target, \"img\", \"src\"),\n          title: Q[e.ref].title\n        }) : null\n      },\n      [r.refLink]: {\n        match: Oe(F),\n        order: 0,\n        parse: (e, t, n) => ({\n          children: t(e[1], n),\n          fallbackChildren: e[0],\n          ref: e[2]\n        }),\n        render: (e, t, n) => Q[e.ref] ? d(\"a\", {\n          key: n.key,\n          href: i.sanitizer(Q[e.ref].target, \"a\", \"href\"),\n          title: Q[e.ref].title\n        }, t(e.children, n)) : d(\"span\", {\n          key: n.key\n        }, e.fallbackChildren)\n      },\n      [r.table]: {\n        match: Me(j),\n        order: 1,\n        parse: Ae,\n        render(e, t, n) {\n          const r = e;\n          return d(\"table\", {\n            key: n.key\n          }, d(\"thead\", null, d(\"tr\", null, r.header.map(function (e, i) {\n            return d(\"th\", {\n              key: i,\n              style: Te(r, i)\n            }, t(e, n));\n          }))), d(\"tbody\", null, r.cells.map(function (e, i) {\n            return d(\"tr\", {\n              key: i\n            }, e.map(function (e, i) {\n              return d(\"td\", {\n                key: i,\n                style: Te(r, i)\n              }, t(e, n));\n            }));\n          })));\n        }\n      },\n      [r.text]: {\n        match: Re(te),\n        order: 4,\n        parse: e => ({\n          text: e[0].replace(T, (e, t) => i.namedCodesToUnicode[t] ? i.namedCodesToUnicode[t] : e)\n        }),\n        render: e => e.text\n      },\n      [r.textBolded]: {\n        match: Be(X),\n        order: 2,\n        parse: (e, t, n) => ({\n          children: t(e[2], n)\n        }),\n        render: (e, t, n) => d(\"strong\", {\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.textEmphasized]: {\n        match: Be(J),\n        order: 3,\n        parse: (e, t, n) => ({\n          children: t(e[2], n)\n        }),\n        render: (e, t, n) => d(\"em\", {\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.textEscaped]: {\n        match: Be(ee),\n        order: 1,\n        parse: e => ({\n          text: e[1],\n          type: r.text\n        })\n      },\n      [r.textMarked]: {\n        match: Be(K),\n        order: 3,\n        parse: Pe,\n        render: (e, t, n) => d(\"mark\", {\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.textStrikethroughed]: {\n        match: Be(Y),\n        order: 3,\n        parse: Pe,\n        render: (e, t, n) => d(\"del\", {\n          key: n.key\n        }, t(e.children, n))\n      }\n    };\n  !0 === i.disableParsingRawHTML && (delete V[r.htmlBlock], delete V[r.htmlSelfClosing]);\n  const ie = function (e) {\n      let t = Object.keys(e);\n      function n(r, i) {\n        let l = [];\n        for (i.prevCapture = i.prevCapture || \"\"; r;) {\n          let a = 0;\n          for (; a < t.length;) {\n            const o = t[a],\n              c = e[o],\n              s = c.match(r, i);\n            if (s) {\n              const e = s[0];\n              i.prevCapture += e, r = r.substring(e.length);\n              const t = c.parse(s, n, i);\n              null == t.type && (t.type = o), l.push(t);\n              break;\n            }\n            a++;\n          }\n        }\n        return i.prevCapture = \"\", l;\n      }\n      return t.sort(function (t, n) {\n        let r = e[t].order,\n          i = e[n].order;\n        return r !== i ? r - i : t < n ? -1 : 1;\n      }), function (e, t) {\n        return n(function (e) {\n          return e.replace(b, \"\\n\").replace(C, \"\").replace(G, \"    \");\n        }(e), t);\n      };\n    }(V),\n    le = (ae = function (e, t) {\n      return function (n, r, i) {\n        const l = e[n.type].render;\n        return t ? t(() => l(n, r, i), n, r, i) : l(n, r, i);\n      };\n    }(V, i.renderRule), function e(t, n = {}) {\n      if (Array.isArray(t)) {\n        const r = n.key,\n          i = [];\n        let l = !1;\n        for (let r = 0; r < t.length; r++) {\n          n.key = r;\n          const a = e(t[r], n),\n            o = \"string\" == typeof a;\n          o && l ? i[i.length - 1] += a : null !== a && i.push(a), l = o;\n        }\n        return n.key = r, i;\n      }\n      return ae(t, e, n);\n    });\n  var ae;\n  const oe = W(n);\n  return q.length ? d(\"div\", null, oe, d(\"footer\", {\n    key: \"footer\"\n  }, q.map(function (e) {\n    return d(\"div\", {\n      id: i.slugify(e.identifier, we),\n      key: e.identifier\n    }, e.identifier, le(ie(e.footnote, {\n      inline: !0\n    })));\n  }))) : oe;\n}\nexport default t => {\n  let {\n      children: r = \"\",\n      options: i\n    } = t,\n    l = function (e, t) {\n      if (null == e) return {};\n      var n,\n        r,\n        i = {},\n        l = Object.keys(e);\n      for (r = 0; r < l.length; r++) t.indexOf(n = l[r]) >= 0 || (i[n] = e[n]);\n      return i;\n    }(t, n);\n  return e.cloneElement(Ze(r, i), l);\n};\nexport { r as RuleType, Ze as compiler, Ue as sanitizer, we as slugify };","map":{"version":3,"names":["r","blockQuote","breakLine","breakThematic","codeBlock","codeFenced","codeInline","footnote","footnoteReference","gfmTask","heading","headingSetext","htmlBlock","htmlComment","htmlSelfClosing","image","link","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","newlineCoalescer","orderedList","paragraph","ref","refImage","refLink","table","tableSeparator","text","textBolded","textEmphasized","textEscaped","textMarked","textStrikethroughed","unorderedList","i","e","MAX","HIGH","MED","LOW","MIN","l","reduce","t","toLowerCase","class","for","a","amp","apos","gt","lt","nbsp","quot","o","c","s","d","p","u","f","h","m","g","y","k","x","b","v","S","C","$","E","w","z","L","A","T","O","B","M","R","I","U","D","N","j","H","P","F","_","G","W","Z","q","Q","V","X","RegExp","J","K","Y","ee","te","ne","re","ie","le","ae","oe","ce","se","de","pe","ue","fe","he","me","ge","ye","ke","xe","be","ve","n","match","exec","prevCapture","list","inline","simple","order","parse","replace","items","map","length","indexOf","ordered","start","render","key","type","Se","Ce","$e","Ee","we","ze","test","Le","inTable","trim","split","push","apply","forEach","trimEnd","Ae","align","cells","header","children","Te","textAlign","Oe","Be","Me","Re","Ie","every","some","Ue","decodeURIComponent","De","Ne","je","He","Pe","Fe","_e","Ge","filter","Boolean","join","We","shift","Ze","overrides","createElement","className","forceInline","forceBlock","pop","wrapper","forceWrapper","toUpperCase","slice","sanitizer","slugify","namedCodesToUnicode","alert","unshift","attrs","noInnerParse","tag","lang","identifier","target","href","completed","checked","readOnly","enforceAtxHeadings","id","level","inAnchor","alt","title","src","disableAutoLink","fallbackChildren","style","disableParsingRawHTML","Object","keys","substring","sort","renderRule","Array","isArray","options","cloneElement","RuleType","compiler"],"sources":["/Users/yahya/Desktop/homenurse/node_modules/markdown-to-jsx/index.tsx"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst enum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { class: 'className', for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BLOCKQUOTE_ALERT_R = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~~.*?~~|==.*?==|.|\\\\n)*?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1|\\\\w)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^==${INLINE_SKIP_R}==`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^~~${INLINE_SKIP_R}~~`)\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\n\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    match(source, state) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(state.prevCapture)\n      const isListBlock = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    order: Priority.HIGH,\n    parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state.inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n  state.inTable = true\n  let tableRow = source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, escaped, etc)\n    .split(/( *(?:`[^`]*`|\\\\\\||\\|) *)/)\n    .reduce((nodes, fragment) => {\n      if (fragment.trim() === '|')\n        nodes.push(\n          tableOutput\n            ? { type: RuleType.tableSeparator }\n            : { type: RuleType.text, text: fragment }\n        )\n      else if (fragment !== '') nodes.push.apply(nodes, parse(fragment, state))\n      return nodes\n    }, [] as MarkdownToJSX.ParserResult[])\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === RuleType.tableSeparator) {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === RuleType.text &&\n        (tableRow[i + 1] == null ||\n          tableRow[i + 1].type === RuleType.tableSeparator)\n      ) {\n        node.text = node.text.trimEnd()\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key\n        .trim()\n        .replace(/(-[a-z])/g, substr => substr[1].toUpperCase())\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href' || key === 'src') {\n    return sanitizeUrlFn(value, tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // Sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    state.prevCapture = state.prevCapture || ''\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n\n        const capture = rule.match(source, state)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n\n          // retain what's been processed so far for lookbacks\n          state.prevCapture += currCaptureString\n\n          source = source.substring(currCaptureString.length)\n\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType as unknown as RuleType\n          }\n\n          result.push(parsed)\n          break\n        }\n\n        i++\n      }\n    }\n\n    // reset on exit\n    state.prevCapture = ''\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(source: string, state: MarkdownToJSX.State) {\n  if (state.inline || state.simple) {\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nexport function sanitizer(url: string): string {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactNode[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactNode {\n    const renderer = rules[ast.type].render as MarkdownToJSX.Rule['render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.sanitizer = options.sanitizer || sanitizer\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  options.createElement = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return options.createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): React.JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return options.createElement(\n      wrapper,\n      { key: 'outer' },\n      jsx\n    ) as React.JSX.Element\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): React.JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n\n        // bail out, not supported\n        if (mappedKey === 'ref') return map\n\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          options.sanitizer\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = compile(normalizedValue.trim())\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, alert, content] = capture[0]\n          .replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, '')\n          .match(BLOCKQUOTE_ALERT_R)\n\n        return {\n          alert,\n          children: parse(content, state),\n        }\n      },\n      render(node, output, state) {\n        const props = {\n          key: state.key,\n        } as Record<string, unknown>\n\n        if (node.alert) {\n          props.className =\n            'markdown-alert-' +\n            options.slugify(node.alert.toLowerCase(), slugify)\n\n          node.children.unshift({\n            attrs: {},\n            children: [{ type: RuleType.text, text: node.alert }],\n            noInnerParse: true,\n            type: RuleType.htmlBlock,\n            tag: 'header',\n          })\n        }\n\n        return h('blockquote', props, output(node.children, state))\n      },\n    },\n\n    [RuleType.breakLine]: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n        }\n      },\n\n      render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          target: `#${options.slugify(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={options.sanitizer(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          ast.children = parseFunc(parse, trimmed, state)\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || (node.children ? output(node.children, state) : '')}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={options.sanitizer(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={options.sanitizer(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      match: (source, state) => {\n        if (state.inAnchor || options.disableAutoLink) {\n          return null\n        }\n\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      match: matchParagraph,\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={options.sanitizer(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: capture[0],\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={options.sanitizer(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{node.fallbackChildren}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      render(node /*, output, state*/) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      match: simpleInlineRegex(TEXT_MARKED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { match: match, parse: parse } = rules[key]\n\n  //   rules[key].match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div\n                id={options.slugify(def.identifier, slugify)}\n                key={def.identifier}\n              >\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<\n  Omit<React.HTMLAttributes<Element>, 'children'> & {\n    children: string\n    options?: MarkdownToJSX.Options\n  }\n> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof React.JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** used for lookbacks */\n    prevCapture?: string\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    alert?: string\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: React.JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: string\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: React.JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: React.JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => React.JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactNode\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.JSX.IntrinsicAttributes,\n      ...children: React.ReactNode[]\n    ) => React.ReactNode\n\n    /**\n     * The library automatically generates an anchor tag for bare URLs included in the markdown\n     * document, but this behavior can be disabled if desired.\n     */\n    disableAutoLink: boolean\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactNode,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactNode\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}